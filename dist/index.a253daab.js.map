{"mappings":"AAAA,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAO;AAEjD,KAAK,CAAC,WAAW,GAAG,CAAmB;AACvC,KAAK,CAAC,cAAc,GAAG,CAAc;AAErC,KAAK,CAAC,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAiB;AAEjE,EAGG,AAHH;;;CAGG,AAHH,EAGG,CACH,KAAK,CAAC,gBAAgB,IAAI,OAAO,GAAK,CAAC;IACrC,GAAG,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,eAAe,EAAE,gBAAgB,CACxE,OAAO;IAGT,EAAuD,AAAvD,uDAAyD;IACvD,EAAA,EAAE,QAAQ,CAAC,MAAM,EACjB,QAAQ,GAAG,QAAQ,CAAC,OAAO,UAAU,CAAE,GAAE,IAAI;IAG/C,EAAwC,AAAxC,sCAAwC;IACxC,MAAM,CAAC,QAAQ;AACjB,CAAC;AAED,EAIG,AAJH;;;;CAIG,AAJH,EAIG,CACH,KAAK,CAAC,YAAY,IAAI,aAAa,GAAK,CAAC;IACvC,GAAG,CAAC,cAAc,GAAG,aAAa,IAAI,YAAY,CAAC,OAAO,CAAC,WAAW;IAEtE,EAAE,EAAE,cAAc,EAChB,QAAQ,CAAC,eAAe,CAAC,YAAY,CACnC,CAAwB,yBACxB,cAAc;IAGlB,UAAU,CAAC,QAAQ,GAAI,CAAC;QACtB,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,CAAiB;IAC1D,CAAC,EAAE,IAAI;AACT,CAAC;AAED,EAEG,AAFH;;CAEG,AAFH,EAEG,CACH,KAAK,CAAC,aAAa,OAAS,CAAC;IAC3B,GAAG,CAAC,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW;IAErD,MAAM,CAAE,cAAc;QACpB,IAAI,CAAC,IAAI;YACP,cAAc,GACZ,gBAAgB,CAAC,cAAc,MAAM,CAAM,QAAG,CAAO,SAAG,CAAM;YAChE,KAAK;QACP,IAAI,CAAC,CAAO;YACV,cAAc,GAAG,CAAM;YACvB,KAAK;QACP,IAAI,CAAC,CAAM;YACT,cAAc,GAAG,CAAO;YACxB,KAAK;;IAGT,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,cAAc;IAEhD,MAAM,CAAC,cAAc;AACvB,CAAC;AAED,EAGG,AAHH;;;CAGG,AAHH,EAGG,CACH,gBAAgB,CAAC,gBAAgB,CAAC,CAAO,SAAG,GAAG,GAAK,CAAC;IACnD,GAAG,CAAC,cAAc;IAClB,YAAY,CAAC,aAAa;AAC5B,CAAC;AAED,YAAY","sources":["scripts/switch.js"],"sourcesContent":["document.documentElement.classList.remove(\"no-js\");\n\nconst STORAGE_KEY = \"user-color-scheme\";\nconst COLOR_MODE_KEY = \"--color-mode\";\n\nconst modeToggleButton = document.querySelector(\".js-mode-toggle\");\n\n/**\n * Pass in a custom prop key and this function will return its\n * computed value.\n */\nconst getCSSCustomProp = (propKey) => {\n  let response = getComputedStyle(document.documentElement).getPropertyValue(\n    propKey\n  );\n\n  // Tidy up the string if there’s something to work with\n  if (response.length) {\n    response = response.replace(/\\'|\"/g, \"\").trim();\n  }\n\n  // Return the string response by default\n  return response;\n};\n\n/**\n * Takes either a passed settings ('light'|'dark') or grabs that from localStorage.\n * If it can’t find the setting in either, it tries to load the CSS color mode,\n * controlled by the media query\n */\nconst applySetting = (passedSetting) => {\n  let currentSetting = passedSetting || localStorage.getItem(STORAGE_KEY);\n\n  if (currentSetting) {\n    document.documentElement.setAttribute(\n      \"data-user-color-scheme\",\n      currentSetting\n    );\n  }\n  setTimeout(function () {\n    document.documentElement.classList.add(\"transition-body\");\n  }, 1000);\n};\n\n/**\n * Get’s the current setting > reverses it > stores it\n */\nconst toggleSetting = () => {\n  let currentSetting = localStorage.getItem(STORAGE_KEY);\n\n  switch (currentSetting) {\n    case null:\n      currentSetting =\n        getCSSCustomProp(COLOR_MODE_KEY) === \"dark\" ? \"light\" : \"dark\";\n      break;\n    case \"light\":\n      currentSetting = \"dark\";\n      break;\n    case \"dark\":\n      currentSetting = \"light\";\n      break;\n  }\n\n  localStorage.setItem(STORAGE_KEY, currentSetting);\n\n  return currentSetting;\n};\n\n/**\n * Clicking the button runs the apply setting method which grabs its parameter\n * from the toggle setting method.\n */\nmodeToggleButton.addEventListener(\"click\", (evt) => {\n  evt.preventDefault();\n  applySetting(toggleSetting());\n});\n\napplySetting();\n"],"names":[],"version":3,"file":"index.a253daab.js.map","sourceRoot":"/__parcel_source_root/"}